package org.pine.aspect;

import java.io.PrintWriter;
import java.io.StringWriter;
import java.lang.reflect.Method;
import java.util.Date;

import javax.servlet.http.HttpServletRequest;
import org.aspectj.lang.JoinPoint;
import org.aspectj.lang.annotation.AfterThrowing;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;
import org.aspectj.lang.annotation.Pointcut;
import org.pine.annotation.ControllerLog;
import org.pine.annotation.ServiceLog;
import org.pine.annotation.ThrowExceptionLog;
import org.springframework.stereotype.Component;
import org.springframework.web.context.request.RequestContextHolder;
import org.springframework.web.context.request.ServletRequestAttributes;

import com.alibaba.fastjson.JSON;

@Aspect
@Component
public class PineLogAspect {

	// 注入Service用于把日志保存数据库
	// @Resource
	// private LogService logService;

	// Service层切点
	@Pointcut("@annotation(org.pine.annotation.ServiceLog)")
	public void ServiceAspect() {
	}

	// Controller层切点
	@Pointcut("@annotation(org.pine.annotation.ControllerLog)")
	public void ControllerAspect() {
	}

	// 异常层切点
	@Pointcut("@annotation(org.pine.annotation.ExceptionLog)")
	public void ExceptionAspect() {
	}

	/**
	 * 前置通知 用于拦截Controller层记录用户的操作
	 * 
	 * @param joinPoint
	 */
	@Before("ControllerAspect()")
	public void ControllerBefore(JoinPoint joinPoint) {

		OprateLog(joinPoint, "controller");
	}

	/**
	 * 前置通知 用于拦截Service层记录用户的操作
	 * 
	 * @param joinPoint
	 */
	@Before("ServiceAspect()")
	public void ServiceBefore(JoinPoint joinPoint) {
		OprateLog(joinPoint, "service");
	}

	/**
	 * 异常通知 用于拦截service层记录异常日志
	 * 
	 * @param joinPoint
	 * @param e
	 */
	@AfterThrowing(pointcut = "ExceptionAspect()", throwing = "e")
	public void ExceptionAfterThrowing(JoinPoint joinPoint, Throwable e) throws ClassNotFoundException {
		ExceptionLog(joinPoint, e);
	}

	private void OprateLog(JoinPoint joinPoint, String type) {
		String ip = "";
		try {
			HttpServletRequest request = ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes())
					.getRequest();
			//HttpSession session = request.getSession();
			ip = request.getRemoteAddr();
		} catch (Exception ex) {
		}
		LogInfo log = new LogInfo();
		try {
			String des = "";
			if (type == "controller")
				des = getControllerMethodDescription(joinPoint);
			else if (type == "service")
				des = getServiceMthodDescription(joinPoint, false);

			// *========数据库日志=========*//

			log.setDescription(des);
			log.setMethod(
					(joinPoint.getTarget().getClass().getName() + "." + joinPoint.getSignature().getName() + "()"));
			log.setType("0");
			log.setRequestIp(ip);
			log.setCreateBy("xxx");
			log.setCreateDate(new Date().toString());
			
			//TODO:后续处理（缓存等）

		} catch (Exception ex) {
			log.setExceptionDetail("异常信息:" + ex.getMessage());
			//TODO:后续处理（缓存等）
		}
	}

	private void ExceptionLog(JoinPoint joinPoint, Throwable e) {
		String ip = "";
		try {
			HttpServletRequest request = ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes())
					.getRequest();
			ip = request.getRemoteAddr();
		} catch (Exception e2) {
			// TODO: handle exception
		}

		// 获取用户请求方法的参数并序列化为JSON格式字符串
		String params = "";
		if (joinPoint.getArgs() != null && joinPoint.getArgs().length > 0) {
			for (int i = 0; i < joinPoint.getArgs().length; i++) {
				params += JSON.toJSONString(joinPoint.getArgs()[i]) + ";";
			}
		}
		LogInfo log = new LogInfo();
		try {
			log.setDescription(getServiceMthodDescription(joinPoint, true));
			log.setExceptionCode(e.getClass().getName());
			log.setType("1");
			log.setExceptionDetail(e.getMessage());
			log.setMethod(
					(joinPoint.getTarget().getClass().getName() + "." + joinPoint.getSignature().getName() + "()"));
			log.setParams(params);
			log.setCreateBy("");
			log.setCreateDate(new Date().toString());
			log.setRequestIp(ip);

			//TODO:后续处理（缓存等）
		} catch (Exception ex) {
			log.setExceptionDetail("异常信息:" + e.getMessage());
			//TODO:后续处理（缓存等）

		}
	}

	/**
	 * 将异常信息输出到log文件
	 * 
	 * @param t
	 * @return
	 */
	public static String getTrace(Throwable t) {
		StringWriter stringWriter = new StringWriter();
		PrintWriter writer = new PrintWriter(stringWriter);
		t.printStackTrace(writer);
		StringBuffer buffer = stringWriter.getBuffer();
		return buffer.toString();
	}

	/**
	 * 获取注解中对方法的描述信息 用于service层注解
	 * 
	 * @param joinPoint
	 * @return 方法描述
	 * @throws Exception
	 */
	public static String getServiceMthodDescription(JoinPoint joinPoint, Boolean isExceptionLog) throws Exception {
		String targetName = joinPoint.getTarget().getClass().getName();
		String methodName = joinPoint.getSignature().getName();
		Object[] arguments = joinPoint.getArgs();
		Class<?> targetClass = Class.forName(targetName);
		Method[] methods = targetClass.getMethods();
		String description = "";
		for (Method method : methods) {
			if (method.getName().equals(methodName)) {
				Class<?>[] clazzs = method.getParameterTypes();
				if (clazzs.length == arguments.length) {

					if (!isExceptionLog)
						description = method.getAnnotation(ServiceLog.class).description();
					else
						description = method.getAnnotation(ThrowExceptionLog.class).description();
					break;
				}
			}
		}
		return description;
	}

	/**
	 * 获取注解中对方法的描述信息 用于Controller层注解
	 * 
	 * @param joinPoint
	 * @return 方法描述
	 * @throws Exception
	 */
	public static String getControllerMethodDescription(JoinPoint joinPoint) throws Exception {
		String targetName = joinPoint.getTarget().getClass().getName();
		String methodName = joinPoint.getSignature().getName();
		Object[] arguments = joinPoint.getArgs();
		Class<?> targetClass = Class.forName(targetName);
		Method[] methods = targetClass.getMethods();
		String description = "";
		for (Method method : methods) {
			if (method.getName().equals(methodName)) {
				Class<?>[] clazzs = method.getParameterTypes();
				if (clazzs.length == arguments.length) {
					description = method.getAnnotation(ControllerLog.class).description();
					break;
				}
			}
		}
		return description;
	}

	public class LogInfo {
		private String guid = "";
		private String description = "";
		private String exceptionCode = "";
		private String type = "";
		private String exceptionDetail = "";
		private String method = "";
		private String params = "";
		private String createBy = "";
		private String createDate = "";
		private String requestIp = "";

		public String getGuid() {
			return guid;
		}

		public void setGuid(String guid) {
			this.guid = guid;
		}

		public String getDescription() {
			return description;
		}

		public void setDescription(String description) {
			this.description = description;
		}

		public String getExceptionCode() {
			return exceptionCode;
		}

		public void setExceptionCode(String exceptionCode) {
			this.exceptionCode = exceptionCode;
		}

		public String getType() {
			return type;
		}

		public void setType(String type) {
			this.type = type;
		}

		public String getExceptionDetail() {
			return exceptionDetail;
		}

		public void setExceptionDetail(String exceptionDetail) {
			this.exceptionDetail = exceptionDetail;
		}

		public String getMethod() {
			return method;
		}

		public void setMethod(String method) {
			this.method = method;
		}

		public String getParams() {
			return params;
		}

		public void setParams(String params) {
			this.params = params;
		}

		public String getCreateBy() {
			return createBy;
		}

		public void setCreateBy(String createBy) {
			this.createBy = createBy;
		}

		public String getCreateDate() {
			return createDate;
		}

		public void setCreateDate(String createDate) {
			this.createDate = createDate;
		}

		public String getRequestIp() {
			return requestIp;
		}

		public void setRequestIp(String requestIp) {
			this.requestIp = requestIp;
		}
	}
}
